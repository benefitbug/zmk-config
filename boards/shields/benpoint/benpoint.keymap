#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define BASE 0
#define LOWER 1
#define MOUSE_KEYS 2
#define MOUSE_TP 3
#define MOUSE_TP_SET 4


/*
 * Defines to enable/disable features
 *
 * These defines allow us to conditionally enable and disable parts of the keymap config.
 *
 * For example, if we decide to build the firmware without the mouse features, we can
 * disable all the config options that rely on those forks and modules without having
 * to edit the entire keymap file manually every time.
 */

#define HAS_MOUSE_KEYS
#define HAS_MOUSE_TP

#ifdef HAS_MOUSE_KEYS
  #include <dt-bindings/zmk/mouse.h>
  #include <behaviors/mouse_keys.dtsi>
#endif  // HAS_MOUSE_KEYS

#ifdef HAS_MOUSE_TP
  // We store the trackpoint settings in a separate file
  // to make organization a little easier.
  #include "include/mouse_tp.dtsi"
#endif  // HAS_MOUSE_TP



// Adjust layer keys based on enabled features.
//
// This prevents build errors when we build the firmware
// without the mouse keys PR or the TP module.
#ifdef HAS_MOUSE_KEYS
  #define U_THUMB_INNER &mo MOUSE_KEYS
#else
  #define U_THUMB_INNER &none
#endif  // HAS_MOUSE_KEYS

#ifdef HAS_MOUSE_TP
  #define U_TOG_TP_SET &tog MOUSE_TP_SET
#else
  #define U_TOG_TP_SET &none
#endif  // HAS_MOUSE_TP


&soft_off {
    hold-time-ms = <1000>; // Only turn off it the key is held for 5 seconds or longer.
};

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "QWRT";
            bindings = <
&kp SQT    &kp W     &kp E    &kp R      &kp T                                       &kp Y           &kp U      &kp I       &kp O     &kp SEMICOLON
&kp A      &kp S     &kp D    &kp F      &kp G                                       &kp H           &kp J      &kp K       &kp L     &kp P
&kp Q      &kp X     &kp C    &kp V      &kp Z      &tog 1            &kp B          &kp N           &kp M      &kp COMMA   &kp DOT   &kp B
&kp LCTRL  &kp LALT  &kp TAB  &kp ENTER  &kp SPACE  &lt 2 RIGHT_ALT   &kp BACKSPACE  &kp LEFT_SHIFT  &mkp LCLK  &tog 1      &tog 4    &kp SLASH
            >;
        };

        number_layer {
            label = "NUM";
            bindings = <
&trans  &trans  &trans  &trans  &trans                  &trans  &trans    &kp UP_ARROW  &trans     &trans
&trans  &trans  &trans  &trans  &trans                  &trans  &kp LEFT  &kp DOWN      &kp RIGHT  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans        &trans     &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans        &trans     &trans
            >;
        };
        
        symbol_layer {
            label = "SYM";
            bindings = <
&kp LG(NUMBER_1)  &kp LG(NUMBER_2)  &kp LG(N3)  &kp LG(N4)  &kp LG(N5)                    &kp GRAVE         &kp MINUS  &kp UP_ARROW  &kp EQUAL  &kp BACKSLASH
&kp ESCAPE        &mkp RCLK         &mo 5       &mkp LCLK   &kp DEL                       &kp LEFT_BRACKET  &kp LEFT   &kp DOWN      &kp RIGHT  &kp RIGHT_BRACKET
&kp N1            &kp N2            &kp N3      &kp N4      &kp N5      &trans  &trans    &kp N6            &kp N7     &kp N8        &kp N9     &kp N0
&mo 3             &trans            &tog 1      &bt BT_CLR  &bt BT_NXT  &trans  &kp LGUI  &trans            &trans     &trans        &soft_off  &studio_unlock
            >;
        };

        function_layer {
            label = "FUN";
            bindings = <
&trans  &trans   &trans   &trans  &trans                  &trans  &trans  &trans  &trans  &trans
&trans  &trans   &trans   &trans  &trans                  &trans  &trans  &trans  &trans  &trans
&kp F1  &kp F2   &kp F3   &kp F4  &kp F5  &trans  &trans  &kp F6  &kp F7  &kp F8  &kp F9  &kp F10
&trans  &kp F11  &kp F12  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        edit_layer {
            label = "FUN";
            bindings = <
&trans  &trans   &trans   &trans  &trans                  &trans  &trans  &trans  &trans  &trans
&trans  &trans   &trans   &trans  &trans                  &trans  &trans  &trans  &trans  &trans
&trans  &trans   &trans   &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans   &trans   &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };


#ifdef HAS_MOUSE_TP

    // Automatically activated when the mouse or trackpoint moves.
    // Configured in `include/mouse_tp.dtsi`.
    MouseTP_layer {
      display-name = "TP";
      bindings = <
U_TOG_TP_SET  &msc SCRL_UP   &trans      &msc SCRL_DOWN  &trans                  &trans  &trans  &trans  &trans  &trans
&trans        &mkp RCLK      &mkp MCLK   &mkp LCLK       &trans                  &trans  &trans  &trans  &trans  &trans
&kp F1        &trans         &trans      &trans          &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans        &kp F11        &kp F12     &trans          &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
        >;
    };

    // You can find the defines for the actual key press behaviors in `include/mouse_tp.dtsi`.
    MouseSettings_layer {
      display-name = "TP Set";
      bindings = <
U_TOG_TP_SET  &trans   &trans   &trans  &trans                  U_MSS_TP_S_I   U_MSS_TP_S_D   U_MSS_TP_PT_I   U_MSS_TP_PT_D  &trans
U_MSS_RESET   &trans   &trans   &trans  &trans                  U_MSS_TP_NI_I  U_MSS_TP_NI_D  U_MSS_TP_V6_I   U_MSS_TP_V6_D  &trans
U_MSS_LOG     &trans   &trans   &trans  &trans  &trans  &trans  &trans         &trans         &trans          &trans         &trans
&trans        &trans   &trans   &trans  &trans  &trans  &trans  &trans         &trans         &trans          &trans         &trans
      >;
    };

#endif

    };
 };